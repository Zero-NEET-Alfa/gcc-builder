name: Building new Clang

on: [push]

env:
  GIT_SECRET: ${{ secrets.GIT_SECRET }}
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Initializing environment
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
        docker rmi `docker images -q`
        sudo apt-get remove landscape-common
        git config --global user.name "ZyCromerZ"
        git config --global user.email "neetroid97@gmail.com"         
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* 
        sudo -E apt-get clean

    - name: Preparing
      run: |
        export DEBIAN_FRONTEND=noninteractive
        export PATH=/usr/bin/core_perl:$PATH
        export TZ=Asia/Jakarta
        sudo ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
        sudo apt-get -y update && apt-get -y upgrade && apt-get -y install git libxml2 python3-pip default-jre tzdata
        sudo apt-get -y install gcc llvm lld g++-multilib clang python3 python3-pip default-jre
        sudo apt-get -y update && apt-get -y upgrade && apt-get -y install git automake lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng bc libstdc++6 libncurses5 wget python3 python3-pip python gcc clang libssl-dev rsync flex git-lfs libz3-dev libz3-4 axel tar && python3 -m pip  install networkx
        sudo apt-get install -y --no-install-recommends \
        bc \
        bison \
        ca-certificates \
        clang \
        cmake \
        curl \
        file \
        flex \
        gcc \
        g++ \
        git \
        libelf-dev \
        libssl-dev \
        lld \
        make \
        ninja-build \
        python3 \
        texinfo \
        xz-utils \
        zlib1g-dev

    - name: Build LLVM
      run: |
        export DEBIAN_FRONTEND=noninteractive
        export PATH=/usr/bin/core_perl:$PATH
        export GIT_SSL_NO_VERIFY=1
        git config --global http.sslverify false
        ./build-llvm.py \
            --clang-vendor "ZyC" \
            --targets "ARM;AArch64;X86" \
            --defines "LLVM_PARALLEL_COMPILE_JOBS=4 LLVM_PARALLEL_LINK_JOBS=4 CMAKE_C_FLAGS=-O3 CMAKE_CXX_FLAGS=-O3 LLVM_USE_LINKER=lld LLVM_ENABLE_LLD=ON" \
            --pgo kernel-defconfig \
            --lto full \
            --shallow-clone \
            --branch "main"

    - name: Build Binutils
      run: |
        ./build-binutils.py --targets arm aarch64 x86_64

    - name: Rmove unused products
      run: |
        rm -fr install/include
        rm -f install/lib/*.a install/lib/*.la

    - name: Strip remaining products
      run: |
        for f in $(find install -type f -exec file {} \; | grep 'not stripped' | awk '{print $1}'); do
          strip -s "${f: : -1}"
        done

    - name: Remove last character from file output (':')
      run: |
        for bin in $(find install -mindepth 2 -maxdepth 3 -type f -exec file {} \; | grep 'ELF .* interpreter' | awk '{print $1}'); do
          bin="${bin: : -1}"

          echo "$bin"
          patchelf --set-rpath "$DIR/install/lib" "$bin"
        done

    - name: Clone exiting TC
      run: |
        git clone https://${GIT_SECRET}@github.com/ZyCromerZ/Clang -b $CloneTo $(pwd)/FromGithub

    - name: Upload TC
      run: |
        pushd llvm-project || exit
        llvm_commit="$(git rev-parse HEAD)"
        short_llvm_commit="$(cut -c-8 <<< "$llvm_commit")"
        popd || exit

        llvm_commit_url="https://github.com/llvm/llvm-project/commit/$short_llvm_commit"
        binutils_ver="$(ls | grep "^binutils-" | sed "s/binutils-//g")"
        clang_version="$(install/bin/clang --version | head -n1 | cut -d' ' -f4)"

        pushd $(pwd)/FromGithub || exit
        rm -fr ./*
        cp -r ../install/* .
        echo "# Quick Info" > README.md
        echo "Clang Version = $clang_version" >> README.md
        echo "Build Date = $(date +"%Y-%m-%d")" >> README.md
        git add .
        echo "Update to $llvm_commit_url" > comm.txt
        echo "" > comm.txt
        echo "Clang VERSION = $clang_version" >> comm.txt
        echo "LLVM COMMIT URL = $llvm_commit_url" >> comm.txt
        git commit -asm "$(cat comm.txt)"
        rm -rf comm.txt
        git push -f
        popd || exit

        curl -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" -d chat_id="-1001150624898" \
            -d "disable_web_page_preview=true" \
            -d "parse_mode=html" \
            -d text="New Toolchain Already Builded boy%0ADate = <code>$(date +"%Y-%m-%d")</code>%0A<code> --- Detail Info About it --- </code>%0AClang version = <code>${clang_version}</code>%0AClang Link = <code>https=//github.com/ZyCromerZ/Clang/tree/${CloneTo}</code>%0A%0A-- uWu --"
